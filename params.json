{"name":"FluentTc","tagline":"TeamCity fluent API ","body":"[![Stories in Ready](https://badge.waffle.io/borismod/FluentTc.png?label=ready&title=Ready)](https://waffle.io/borismod/FluentTc)\r\n# FluentTc\r\nEasy-to-use, readable and comprehensive library for consuming TeamCity REST API. Written using real scenarios in mind, enables variuos range of queries and operation on TeamCity\r\n\r\n# How to get\r\n\r\ninstall-package FluentTc\r\n\r\n# How to use\r\n```C#\r\n// Disable agent by IP\r\nnew RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .DisableAgent(_ => _.Ip(\"127.0.0.1\"));\r\n\r\n// Enable agent by name\r\nnew RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .EnableAgent(_ => _.Name(\"agent1\"));\r\n\r\n// Get project by ID\r\nvar project = new RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .GetProjectById(\"FluentTc\");\r\n\r\n// Get connected Agents\r\nvar agents = new RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .GetAgents(h => h.Connected());\r\n\r\n// Get disconnected, enabled and authorized agents\r\nvar enabledAuthorizedButDisconnectedAgents = new RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .GetAgents(h => h.Disconnected().Enabled().Authorized());\r\n\r\n// Get builds queue from specific project by its ID\r\nvar buildQueue = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuildsQueue(_ => _.Project(__ => __.Id(\"OpenSourceProject\")));\r\n\r\n// Get builds queue from specific project by its ID and build configuration name\r\nvar buildQueue2 = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuildsQueue(\r\n        __ =>\r\n            __.Project(___ => ___.Id(\"OpenSourceProject\"))\r\n                .BuildConfiguration(b => b.Name(\"FluentTc\")));\r\n\r\n// Remove builds from queue by project Id recursively \r\nvar connectedTc = new RemoteTc().Connect(_ => _.ToHost(\"tc\"));\r\nconnectedTc.GetBuildConfigurationsRecursively(\"ProjectId\")\r\n    .ForEach(c => connectedTc.RemoveBuildFromQueue(__ => __.BuildConfiguration(___ => ___.Id(c.Id))));\r\n\r\n// Get not personal builds, under build configuration bt2, under project OpenSourceProject, that ran on agent Agent01 on branch master\r\nvar builds = new RemoteTc().Connect(a => a.ToHost(\"tc\").AsGuest())\r\n    .GetBuilds(\r\n        h =>\r\n            h.BuildConfiguration(r => r.Id(\"bt2\"))\r\n                .NotPersonal()\r\n                .Project(r => r.Name(\"OpenSourceProject\"))\r\n                .AgentName(\"Agent01\")\r\n                .Branch(b => b.Name(\"master\")));\r\n\r\n// Get personal builds with additional properties: StartDate, FinishDate and StatusText\r\nbuilds = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuilds(_ => _.Personal(), _ => _.DefaultCount(),\r\n        _ => _.IncludeStartDate().IncludeFinishDate().IncludeStatusText());\r\n\r\n// Get 5 personal builds with default properties\r\nbuilds = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuilds(_ => _.Personal(), _ => _.Count(5), _ => _.IncludeDefaults());\r\n\r\n// Get 5 not personal builds from build configuration bt2 with default properties\r\nbuilds = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuilds(_ => _.BuildConfiguration(x => x.Id(\"bt2\")).NotPersonal().NotRunning(), _ => _.Count(5),\r\n        _ => _.IncludeDefaults());\r\n\r\n// Get specific build by ID (with all the properties)\r\nbuild = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuild(_ => _.Id(123456));\r\n\r\n// Get build configuration by ID\r\nvar buildConfiguration = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .GetBuildConfiguration(_ => _.Id(\"bt2\"));\r\n\r\n// Retrieves all the build configuration under a project\r\nvar buildConfigurations = new RemoteTc().Connect(_ => _.ToHost(\"tc\").AsGuest())\r\n    .GetBuildConfigurations(_ => _.Project(__ => __.Id(\"Trunk\")));\r\n\r\n// Retrieves all the build configuration under a project recursively\r\nbuildConfigurations = new RemoteTc().Connect(_ => _.ToHost(\"tc\").AsGuest())\r\n    .GetBuildConfigurations(_ => _.ProjectRecursively(__ => __.Id(\"Trunk\")));\r\n\r\n// Set build parameters on build configuration bt2\r\nnew RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .SetParameters(_ => _.Id(\"bt2\"),\r\n        _ => _.Parameter(\"name\", \"value\").Parameter(\"name2\", \"value\"));\r\n\r\n// Run build configuration bt2\r\nnew RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .RunBuildConfiguration(_ => _.Id(\"bt2\"));\r\n\r\n// Run build configuration bt2 with custom build parameters\r\nnew RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .RunBuildConfiguration(_ => _.Id(\"bt2\"),\r\n        _ => _.Parameter(\"name\", \"value\").Parameter(\"name2\", \"value\"));\r\n\r\n// Run build configuration bt2 on specific agent\r\nnew RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .RunBuildConfiguration(having => having.Id(\"bt2\"), onAgent => onAgent.Name(\"agent1\"));\r\n\r\n// Run build configuration bt2 on specific agent with custom parameters\r\nnew RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .RunBuildConfiguration(_ => _.Id(\"bt2\"), _ => _.Name(\"agent1\"),\r\n        _ => _.Parameter(\"name\", \"value\").Parameter(\"name2\", \"value\"));\r\n\r\n// Create build configuration under a project\r\nbuildConfiguration = new RemoteTc().Connect(_ => _.ToHost(\"tc\"))\r\n    .CreateBuildConfiguration(_ => _.Id(\"Trunk\"), \"config name\");\r\n\r\n// Retrieves all the projects\r\nvar allProjects = new RemoteTc().Connect(_ => _.ToHost(\"tc\").AsGuest())\r\n    .GetAllProjects();\r\n```\r\n# How can I help\r\n* Vote  http://nugetmusthaves.com/Package/FluentTc\r\n* Contribute \r\n\r\n# TeamCity REST API reference\r\nhhttps://confluence.jetbrains.com/display/TCD9/REST+API\r\n\r\n## Dependencies\r\n* Autofac http://autofac.org/ (≥ 3.5.2)\r\n* System.IO.Abstractions https://github.com/tathamoddie/System.IO.Abstractions (≥ 2.0.0.116)\r\n* EasyHttp https://github.com/hhariri/EasyHttp (== 1.6.67.0)\r\n\r\n## Guidelines for contributors\r\n* Fork this repository \r\n* Choose issue from open issues \r\n* Develop using (A)TDD, Clean Code principles, SOLID\r\n* Strive to fluent, readable, easy to discover API\r\n* Use (A)TDD, Clean Code\r\n* Submit Pull Request\r\n\r\n\r\n## License\r\nApache License 2.0\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}